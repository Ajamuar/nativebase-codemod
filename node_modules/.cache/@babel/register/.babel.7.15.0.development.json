{
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/suraj/Sites/projects/nativebase-codemod/\",\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/suraj/Sites/projects/nativebase-codemod\",\"filename\":\"/Users/suraj/Sites/projects/nativebase-codemod/extend-theme-transformer.js\",\"targets\":{},\"cloneInputAst\":true,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/suraj/Sites/projects/nativebase-codemod\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"SymbolTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"IndexedAccessType\":{\"enter\":[null]},\"OptionalIndexedAccessType\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.15.0": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/suraj/Sites/projects/nativebase-codemod/",
      "babelrc": false,
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/suraj/Sites/projects/nativebase-codemod",
      "filename": "/Users/suraj/Sites/projects/nativebase-codemod/extend-theme-transformer.js",
      "targets": {},
      "cloneInputAst": true,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/suraj/Sites/projects/nativebase-codemod",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": true,
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "transform-flow-strip-types",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassPrivateProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "InterfaceTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeInternalSlot": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "SymbolTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "IndexedAccessType": {
              "enter": [
                null
              ]
            },
            "OptionalIndexedAccessType": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/suraj/Sites/projects/nativebase-codemod/extend-theme-transformer.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "nullishCoalescingOperator",
          [
            "flow",
            {}
          ]
        ]
      },
      "generatorOpts": {
        "filename": "/Users/suraj/Sites/projects/nativebase-codemod/extend-theme-transformer.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/suraj/Sites/projects/nativebase-codemod/",
        "sourceFileName": "extend-theme-transformer.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst oldThemeObj = {\n  lineHeights: {\n    none: 1,\n    shorter: 1.25,\n    short: 1.375,\n    base: 1.5,\n    tall: 1.625,\n    taller: 2,\n    3: \"12px\",\n    4: \"16px\",\n    5: \"20px\",\n    6: \"24px\",\n    7: \"28px\",\n    8: \"32px\",\n    9: \"36px\",\n    10: \"40px\"\n  },\n  letterSpacings: {\n    xxs: -1.5,\n    xs: -0.5,\n    sm: 0,\n    md: 0.1,\n    lg: 0.15,\n    xl: 0.25,\n    \"2xl\": 0.4,\n    \"3xl\": 0.5,\n    \"4xl\": 1.25,\n    \"5xl\": 1.5\n  },\n  fontSizes: {\n    xxs: 10\n  },\n  radii: {\n    sm: 2,\n    md: 4,\n    lg: 6,\n    xl: 8,\n    pill: 25\n  },\n  borderWidth: {\n    none: 0\n  }\n};\nconst oldTheme = JSON.stringify(oldThemeObj, null, 2); // exit\n\nvar _default = (fileInfo, api) => {\n  const j = api.jscodeshift;\n  const root = j(fileInfo.source);\n  let extendThemeImport = false;\n  modifyExtendTheme();\n  modifyProvider();\n\n  function modifyExtendTheme() {\n    // extendTheme import\n    let localNameExtendTheme = \"extendTheme\";\n    root.find(j.ImportDeclaration).filter(impDecNodePath => impDecNodePath.value.source.value === \"native-base\").forEach(impDecNodePathFiltered => {\n      j(impDecNodePathFiltered) // find ImportSpecifier here instead of Identifier\n      .find(j.ImportSpecifier).forEach(impSpecNodePath => {\n        if (impSpecNodePath.node.imported.name === \"extendTheme\") {\n          extendThemeImport = true;\n\n          if (impSpecNodePath.node.local.name) {\n            localNameExtendTheme = impSpecNodePath.node.local.name;\n          }\n        }\n      });\n    }); // if extend theme import\n\n    if (extendThemeImport) {\n      const callExpression = root.find(j.CallExpression, {\n        callee: {\n          type: \"Identifier\",\n          name: localNameExtendTheme\n        }\n      });\n      const callExpressionLength = callExpression.length;\n\n      if (callExpressionLength) {\n        const output = callExpression.find(j.ObjectExpression).forEach(node => {\n          node.insertBefore(`${oldTheme}`);\n        });\n      }\n    }\n  }\n\n  function modifyProvider() {\n    const nativeBaseProviderJSX = root.find(j.JSXOpeningElement, {\n      name: {\n        type: \"JSXIdentifier\",\n        name: \"NativeBaseProvider\"\n      }\n    });\n    const themeAttribute = nativeBaseProviderJSX.find(j.JSXAttribute, {\n      name: {\n        name: \"theme\"\n      }\n    });\n\n    if (themeAttribute.length === 0) {\n      //import extend theme\n      addImportExtendTheme(); //\n\n      const imports = root.find(j.ImportDeclaration);\n      imports.insertAfter(`const theme_3.1 = extendTheme(${oldTheme});\n      `);\n      nativeBaseProviderJSX.replaceWith(`<NativeBaseProvider theme={theme_3.1}>`);\n    } else {// if empty theme\n      // const themeAttrNode = themeAttribute.nodes()[0];\n      // if (\n      //   themeAttrNode &&\n      //   themeAttrNode.value.type === \"JSXExpressionContainer\"\n      // ) {\n      //   if (themeAttrNode.value.expression?.type === \"Identifier\") {\n      //     // no need to change anything\n      //   } else {\n      //   }\n      // }\n      // themeAttribute.replaceWith(\n      //   `theme={extendTheme(${oldTheme})}>`\n      // );\n    } //   // and not theme\n    //   nativeBaseProviderAttribute.insertBefore(\n    //     `theme={extendTheme(${oldTheme})}`\n    //   );\n    // }\n\n  }\n\n  function addImportExtendTheme() {\n    if (!extendThemeImport) {\n      root.find(j.ImportDeclaration).get().insertBefore('import {extendTheme} from \"native-base\";');\n    }\n  }\n\n  return root.toSource();\n};\n\nexports.default = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "extend-theme-transformer.js"
      ],
      "names": [
        "oldThemeObj",
        "lineHeights",
        "none",
        "shorter",
        "short",
        "base",
        "tall",
        "taller",
        "letterSpacings",
        "xxs",
        "xs",
        "sm",
        "md",
        "lg",
        "xl",
        "fontSizes",
        "radii",
        "pill",
        "borderWidth",
        "oldTheme",
        "JSON",
        "stringify",
        "fileInfo",
        "api",
        "j",
        "jscodeshift",
        "root",
        "source",
        "extendThemeImport",
        "modifyExtendTheme",
        "modifyProvider",
        "localNameExtendTheme",
        "find",
        "ImportDeclaration",
        "filter",
        "impDecNodePath",
        "value",
        "forEach",
        "impDecNodePathFiltered",
        "ImportSpecifier",
        "impSpecNodePath",
        "node",
        "imported",
        "name",
        "local",
        "callExpression",
        "CallExpression",
        "callee",
        "type",
        "callExpressionLength",
        "length",
        "output",
        "ObjectExpression",
        "insertBefore",
        "nativeBaseProviderJSX",
        "JSXOpeningElement",
        "themeAttribute",
        "JSXAttribute",
        "addImportExtendTheme",
        "imports",
        "insertAfter",
        "replaceWith",
        "get",
        "toSource"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/suraj/Sites/projects/nativebase-codemod/",
      "sourcesContent": [
        "const oldThemeObj = {\n  lineHeights: {\n    none: 1,\n    shorter: 1.25,\n    short: 1.375,\n    base: 1.5,\n    tall: 1.625,\n    taller: 2,\n    3: \"12px\",\n    4: \"16px\",\n    5: \"20px\",\n    6: \"24px\",\n    7: \"28px\",\n    8: \"32px\",\n    9: \"36px\",\n    10: \"40px\",\n  },\n  letterSpacings: {\n    xxs: -1.5,\n    xs: -0.5,\n    sm: 0,\n    md: 0.1,\n    lg: 0.15,\n    xl: 0.25,\n    \"2xl\": 0.4,\n    \"3xl\": 0.5,\n    \"4xl\": 1.25,\n    \"5xl\": 1.5,\n  },\n  fontSizes: {\n    xxs: 10,\n  },\n  radii: {\n    sm: 2,\n    md: 4,\n    lg: 6,\n    xl: 8,\n    pill: 25,\n  },\n  borderWidth: {\n    none: 0,\n  },\n};\n\nconst oldTheme = JSON.stringify(oldThemeObj, null, 2);\n// exit\nexport default (fileInfo, api) => {\n  const j = api.jscodeshift;\n  const root = j(fileInfo.source);\n  let extendThemeImport = false;\n\n  modifyExtendTheme();\n  modifyProvider();\n  function modifyExtendTheme() {\n    // extendTheme import\n    let localNameExtendTheme = \"extendTheme\";\n    root\n      .find(j.ImportDeclaration)\n      .filter(\n        (impDecNodePath) => impDecNodePath.value.source.value === \"native-base\"\n      )\n      .forEach((impDecNodePathFiltered) => {\n        j(impDecNodePathFiltered)\n          // find ImportSpecifier here instead of Identifier\n          .find(j.ImportSpecifier)\n          .forEach((impSpecNodePath) => {\n            if (impSpecNodePath.node.imported.name === \"extendTheme\") {\n              extendThemeImport = true;\n\n              if (impSpecNodePath.node.local.name) {\n                localNameExtendTheme = impSpecNodePath.node.local.name;\n              }\n            }\n          });\n      });\n\n    // if extend theme import\n    if (extendThemeImport) {\n      const callExpression = root.find(j.CallExpression, {\n        callee: {\n          type: \"Identifier\",\n          name: localNameExtendTheme,\n        },\n      });\n\n      const callExpressionLength = callExpression.length;\n\n      if (callExpressionLength) {\n        const output = callExpression\n          .find(j.ObjectExpression)\n          .forEach((node) => {\n            node.insertBefore(`${oldTheme}`);\n          });\n      }\n    }\n  }\n  function modifyProvider() {\n    const nativeBaseProviderJSX = root.find(j.JSXOpeningElement, {\n      name: {\n        type: \"JSXIdentifier\",\n        name: \"NativeBaseProvider\",\n      },\n    });\n\n    const themeAttribute = nativeBaseProviderJSX.find(j.JSXAttribute, {\n      name: { name: \"theme\" },\n    });\n\n    if (themeAttribute.length === 0) {\n      //import extend theme\n\n      addImportExtendTheme();\n\n      //\n\n      const imports = root.find(j.ImportDeclaration);\n      imports.insertAfter(`const theme_3.1 = extendTheme(${oldTheme});\n      `);\n\n      nativeBaseProviderJSX.replaceWith(\n        `<NativeBaseProvider theme={theme_3.1}>`\n      );\n    } else {\n      // if empty theme\n      // const themeAttrNode = themeAttribute.nodes()[0];\n      // if (\n      //   themeAttrNode &&\n      //   themeAttrNode.value.type === \"JSXExpressionContainer\"\n      // ) {\n      //   if (themeAttrNode.value.expression?.type === \"Identifier\") {\n      //     // no need to change anything\n      //   } else {\n      //   }\n      // }\n      // themeAttribute.replaceWith(\n      //   `theme={extendTheme(${oldTheme})}>`\n      // );\n    }\n    //   // and not theme\n\n    //   nativeBaseProviderAttribute.insertBefore(\n    //     `theme={extendTheme(${oldTheme})}`\n    //   );\n    // }\n  }\n\n  function addImportExtendTheme() {\n    if (!extendThemeImport) {\n      root\n        .find(j.ImportDeclaration)\n        .get()\n        .insertBefore('import {extendTheme} from \"native-base\";');\n    }\n  }\n  return root.toSource();\n};\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1630494217288
  }
}